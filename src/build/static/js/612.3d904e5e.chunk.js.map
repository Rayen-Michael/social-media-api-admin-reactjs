{"version":3,"file":"static/js/612.3d904e5e.chunk.js","mappings":"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","sources":["components/Header.jsx","components/BarChart.jsx","components/StatBox.jsx","components/ProgressCircle.jsx","utils/dateUtils.js","components/global/Avatar.jsx","pages/dashboard/index.jsx"],"sourcesContent":["import { Typography, Box, useTheme } from \"@mui/material\";\nimport { tokens } from \"../theme\";\n\nconst Header = ({ title, subtitle }) => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  return (\n    <Box mb=\"30px\">\n      <Typography\n        variant=\"h2\"\n        color={colors.grey[100]}\n        fontWeight=\"bold\"\n        sx={{ m: \"0 0 5px 0\" }}\n      >\n        {title}\n      </Typography>\n      <Typography variant=\"h5\" color={colors.greenAccent[400]}>\n        {subtitle}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default Header;\n","import { useTheme } from \"@mui/material\";\nimport { ResponsiveBar } from \"@nivo/bar\";\nimport { tokens } from \"../theme\";\n\nconst BarChart = ({ data }) => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  return (\n    <ResponsiveBar\n      data={data}\n      theme={{\n        // added\n        axis: {\n          domain: {\n            line: {\n              stroke: colors.grey[100],\n            },\n          },\n          legend: {\n            text: {\n              fill: colors.grey[100],\n            },\n          },\n          ticks: {\n            line: {\n              stroke: colors.grey[100],\n              strokeWidth: 1,\n            },\n            text: {\n              fill: colors.grey[100],\n            },\n          },\n        },\n        legends: {\n          text: {\n            fill: colors.grey[100],\n          },\n        },\n      }}\n      keys={[\"users\", \"posts\", \"comments\"]}\n      indexBy=\"month\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n      padding={0.3}\n      valueScale={{ type: \"linear\" }}\n      indexScale={{ type: \"band\", round: true }}\n      colors={{ scheme: \"accent\" }}\n      borderColor={{\n        from: 'color',\n        modifiers: [\n          ['darker', .6],\n          ['opacity', .5]\n        ]\n      }}\n      colorBy=\"id\"\n      defs={[\n        {\n          id: \"dots\",\n          type: \"patternDots\",\n          background: \"inherit\",\n          color: \"#38bcb2\",\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: \"lines\",\n          type: \"patternLines\",\n          background: \"inherit\",\n          color: \"#eed312\",\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      // fill={[\n      //   {\n      //     match: {\n      //       id: 'users'\n      //     },\n      //     id: 'dots'\n      //   },\n      //   {\n      //     match: {\n      //       id: 'comments'\n      //     },\n      //     id: 'lines'\n      //   }\n      // ]}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0, // changed\n        legendPosition: \"middle\",\n        legendOffset: 32,\n      }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0, // changed\n        legendPosition: \"middle\",\n        legendOffset: -40,\n      }}\n      enableLabel={true}\n      label=\"formattedValue\"\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{\n        \"from\": \"theme\",\n        \"theme\": \"labels.text.fill\"\n      }}\n      legends={[\n        {\n          dataFrom: \"keys\",\n          anchor: \"bottom-right\",\n          direction: \"column\",\n          justify: false,\n          translateX: 120,\n          translateY: 0,\n          itemsSpacing: 2,\n          itemWidth: 100,\n          itemHeight: 20,\n          itemDirection: \"left-to-right\",\n          itemOpacity: 0.85,\n          symbolSize: 20,\n          effects: [\n            {\n              on: \"hover\",\n              style: {\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n      role=\"application\"\n      tooltip={e => {\n        return (\n          <div\n            style={{\n              background: \"#f0f0f0\",\n              color: \"#333\",\n              padding: \"4px 8px\",\n              borderRadius: \"4px\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              fontSize: \"13px\",\n            }}\n          >\n            <div style={{\n              backgroundColor: e.color,\n              width: \"10px\",\n              height: \"10px\",\n            }} />\n            <div style={{ marginLeft: \"8px\" }}>{`${e.id} - `}</div>\n            <div style={{ fontWeight: \"bold\", marginLeft: \"4px\" }}>{e.value}</div>\n          </div>\n        );\n      }}\n      barAriaLabel={function (e) {\n        return e.id + \" \" + e.value;\n      }}\n    />\n  );\n};\n\nexport default BarChart;\n","import { Box, Typography, useTheme } from \"@mui/material\";\nimport { tokens } from \"../theme\";\n\nconst StatBox = ({ title, subtitle, icon }) => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  return (\n    <Box\n      gridColumn=\"span 3\"\n      backgroundColor={colors.primary[400]}\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box width=\"100%\" m=\"0 30px\">\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            {icon}\n            <Typography\n              variant=\"h4\"\n              fontWeight=\"bold\"\n              sx={{ color: colors.grey[100] }}\n              mt=\"8px\"\n            >\n              {title}\n            </Typography>\n          </Box>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt=\"8px\">\n          <Typography variant=\"h5\" sx={{ color: colors.greenAccent[500] }}>\n            {subtitle}\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default StatBox;\n","import { Box, useTheme } from \"@mui/material\";\nimport { tokens } from \"../theme\";\n\nconst ProgressCircle = ({ progress = \"0\", size = \"40\" }) => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  const angle = progress * 360;\n\n  return (\n    <Box\n      sx={{\n        background: `radial-gradient(${colors.primary[400]} 55%, transparent 56%),\n            conic-gradient(transparent 0deg ${angle}deg, ${colors.blueAccent[500]} ${angle}deg 360deg),\n            ${colors.greenAccent[500]}`,\n        borderRadius: \"50%\",\n        width: `${size}px`,\n        height: `${size}px`,\n      }}\n    />\n  );\n};\n\nexport default ProgressCircle;\n","export const isSameDate = (date, date2, compareWithToday = false) => {\r\n    date = new Date(date);\r\n\r\n    if (date2 !== undefined && date2 !== null && date2 !== '' && date2 !== 'Invalid Date') {\r\n        date2 = new Date(date2);\r\n    }\r\n\r\n    if (compareWithToday) {\r\n        const today = new Date();\r\n\r\n        return date.getFullYear() === today.getFullYear() &&\r\n            date.getMonth() === today.getMonth() &&\r\n            date.getDate() === today.getDate();\r\n    }\r\n\r\n    return date.getFullYear() === date2.getFullYear() &&\r\n        date.getMonth() === date2.getMonth() &&\r\n        date.getDate() === date2.getDate();\r\n};\r\n\r\nexport const toDateString = (date) => {\r\n    const dateObj = new Date(date);\r\n    const year = dateObj.getFullYear();\r\n    const month = dateObj.getMonth() + 1;\r\n    const day = dateObj.getDate();\r\n\r\n    let yearString = year.toString();\r\n    let monthString = month < 10 ? '0' + month.toString() : month.toString();\r\n    let dayString = day < 10 ? '0' + day.toString() : day.toString();\r\n\r\n    return yearString + '-' + monthString + '-' + dayString;\r\n}\r\n\r\nexport const toTimeString = (date, is24HourFormat = false, showSeconds = false) => {\r\n    const dateObj = new Date(date);\r\n    const hours = dateObj.getHours();\r\n    const minutes = dateObj.getMinutes();\r\n    const seconds = dateObj.getSeconds();\r\n\r\n    let hoursString = hours < 10 ? '0' + hours.toString() : hours.toString();\r\n    let minutesString = minutes < 10 ? '0' + minutes.toString() : minutes.toString();\r\n    let secondsString = seconds < 10 ? '0' + seconds.toString() : seconds.toString();\r\n\r\n    let timeString = hoursString + ':' + minutesString;\r\n\r\n    if (!is24HourFormat) {\r\n        if (hours > 12) {\r\n            hoursString = (hours - 12).toString();\r\n        } else if (hours === 0) {\r\n            hoursString = '12';\r\n        }\r\n        timeString = hoursString + ':' + minutesString + ' ' + (hours >= 12 ? 'PM' : 'AM');\r\n    }\r\n\r\n    if (showSeconds) {\r\n        timeString = timeString + ':' + secondsString;\r\n    }\r\n\r\n    return timeString;\r\n}\r\n\r\nexport const toDateTimeString = (date, is24HourFormat = false, showSeconds = false) => {\r\n    return toDateString(date) + ' ' + toTimeString(date, is24HourFormat, showSeconds);\r\n}\r\n\r\nexport const toTimeAgo = (date) => {\r\n    const dateObj = new Date(date);\r\n    const now = new Date();\r\n    const seconds = Math.floor((now - dateObj) / 1000);\r\n\r\n    let interval = Math.floor(seconds / 31536000);\r\n\r\n    if (interval > 1) {\r\n        return interval + ' years ago';\r\n    }\r\n\r\n    interval = Math.floor(seconds / 2592000);\r\n    if (interval > 1) {\r\n        return interval + ' months ago';\r\n    }\r\n\r\n    interval = Math.floor(seconds / 86400);\r\n    if (interval > 1) {\r\n        return interval + ' days ago';\r\n    }\r\n\r\n    interval = Math.floor(seconds / 3600);\r\n    if (interval > 1) {\r\n        return interval + ' hours ago';\r\n    }\r\n\r\n    interval = Math.floor(seconds / 60);\r\n    if (interval > 1) {\r\n        return interval + ' minutes ago';\r\n    }\r\n\r\n    return Math.floor(seconds) + ' seconds ago';\r\n}\r\n","import React from 'react'\r\n\r\nconst Avatar = ({ avatar, size = '40px', fit = 'cover' }) => {\r\n    const style = {\r\n        width: size,\r\n        height: size,\r\n        borderRadius: '50%',\r\n        objectFit: fit,\r\n    }\r\n\r\n    if (avatar && avatar.url) {\r\n        return (\r\n            <div style={style}>\r\n                <img\r\n                    src={avatar.url}\r\n                    style={style}\r\n                    alt=\"avatar\"\r\n                    width={size}\r\n                    height={size}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            <img\r\n                src='../../avatar.png'\r\n                style={style}\r\n                alt=\"avatar\"\r\n                width={size}\r\n                height={size}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import { useState, useEffect } from 'react';\nimport { Box, Button, Typography, useTheme } from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { tokens } from \"../../theme\";\nimport DownloadOutlinedIcon from \"@mui/icons-material/DownloadOutlined\";\nimport EmailIcon from \"@mui/icons-material/Email\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\nimport CommentIcon from \"@mui/icons-material/Comment\";\nimport Header from \"../../components/Header\";\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport BarChart from \"../../components/BarChart\";\nimport StatBox from \"../../components/StatBox\";\nimport ProgressCircle from \"../../components/ProgressCircle\";\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {\n  getStatsAction,\n  getRecentPostsAction,\n  getRecentUsersAction,\n  getVerifiedUsersStatsAction,\n  getMonthlyStatsAction,\n} from '../../redux/actions';\nimport { toDateString } from '../../utils/dateUtils';\nimport Avatar from '../../components/global/Avatar';\n\nconst Dashboard = () => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  const auth = useSelector((state) => state.auth);\n  // const users = useSelector((state) => state.users);\n  const stats = useSelector((state) => state.stats);\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n\n  const closeBackdrop = () => {\n    setOpen(false);\n  };\n\n  const openBackdrop = () => {\n    setOpen(true);\n  };\n\n  const getData = async () => {\n    if (stats.status === 'idle') {\n      const statsPromise = getStatsAction(dispatch, auth.token);\n      const recentUsersPromise = getRecentUsersAction(dispatch, auth.token);\n      const recentPostsPromise = getRecentPostsAction(dispatch, auth.token);\n      const verifiedUsersPromise = getVerifiedUsersStatsAction(dispatch, auth.token);\n      const monthlyStatsPromise = getMonthlyStatsAction(dispatch, auth.token);\n      openBackdrop();\n      await Promise.all([\n        statsPromise, recentUsersPromise, recentPostsPromise,\n        verifiedUsersPromise, monthlyStatsPromise\n      ]);\n      closeBackdrop();\n    }\n  }\n\n  const renderIcon = (key) => {\n    switch (key) {\n      case 'users':\n        return <PersonAddIcon sx={{ color: colors.greenAccent[600], fontSize: \"32px\" }} />;\n      case 'posts':\n        return <ListIcon sx={{ color: colors.greenAccent[600], fontSize: \"32px\" }} />;\n      case 'comments':\n        return <CommentIcon sx={{ color: colors.greenAccent[600], fontSize: \"32px\" }} />;\n      case 'messages':\n        return <EmailIcon sx={{ color: colors.greenAccent[600], fontSize: \"32px\" }} />;\n      default:\n        return <ListIcon sx={{ color: colors.greenAccent[600], fontSize: \"32px\" }} />;\n    }\n  }\n\n  useEffect(() => {\n    document.title = \"Dashboard - Admin Panel\";\n\n    if (\n      auth.status === 'authenticating' || auth.status === 'loadingUser' ||\n      stats.status === 'loading'\n    ) {\n      openBackdrop();\n    }\n    else {\n      closeBackdrop();\n    }\n\n    return () => { }\n\n  }, [\n    auth.token, auth.user, auth.status, stats.status\n  ]);\n\n  useEffect(() => {\n    getData();\n\n    return () => { }\n\n  }, [auth.token]);\n\n  return (\n    <>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={open}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n\n      <Box m=\"20px\">\n        {/* HEADER */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Header title=\"DASHBOARD\" subtitle=\"Welcome to admin dashboard\" />\n\n          <Box>\n            <Button\n              sx={{\n                backgroundColor: colors.blueAccent[700],\n                color: colors.grey[100],\n                fontSize: \"14px\",\n                fontWeight: \"bold\",\n                padding: \"10px 20px\",\n              }}\n            >\n              <DownloadOutlinedIcon sx={{ mr: \"10px\" }} />\n              Download Reports\n            </Button>\n          </Box>\n        </Box>\n\n        {/* GRID & CHARTS */}\n\n        <Box\n          display=\"grid\"\n          gridTemplateColumns=\"repeat(12, 1fr)\"\n          gridAutoRows=\"140px\"\n          gap=\"20px\"\n          pb=\"20px\"\n        >\n          {/* Row 1 Start */}\n\n          {\n            (stats.status === 'success' && stats.stats) &&\n            Object.keys(stats.stats).map((key) => {\n              const stat = stats.stats[key];\n              return (\n                <StatBox\n                  key={key}\n                  title={stat.total}\n                  subtitle={key.toLocaleUpperCase()}\n                  icon={renderIcon(key)}\n                // progress={stat.progress ? stat.progress / 100 : 0}\n                // increase={\n                //   stat.progress !== null && stat.progress >= 0 ?\n                //     `+${stat.progress}%` :\n                //     `${stat.progress}%`\n                // }\n                />\n              );\n            })\n          }\n\n          {/* Row 1 End */}\n\n          {/* Row 2 Start */}\n\n          <Box\n            gridColumn={{ xs: \"span 12\", lg: \"span 6\" }}\n            gridRow=\"span 3\"\n            backgroundColor={colors.primary[400]}\n            overflow=\"auto\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              borderBottom={`4px solid ${colors.primary[500]}`}\n              colors={colors.grey[100]}\n              p=\"15px\"\n            >\n              <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"600\">\n                Recent Users\n              </Typography>\n            </Box>\n            {\n              (stats.status === 'success' && stats.recentUsers) &&\n              stats.recentUsers.map((user, i) => (\n                <Box\n                  key={`${user._id}-${i}`}\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                  borderBottom={`4px solid ${colors.primary[500]}`}\n                  p=\"15px\"\n                >\n                  <Box display='flex' flexDirection='row' justifyContent='center'>\n                    <Avatar avatar={user.avatar} />\n                    <Box ml='20px'>\n                      <Typography\n                        color={colors.greenAccent[500]}\n                        variant=\"h5\"\n                        fontWeight=\"600\"\n                      >\n                        {user._id}\n                      </Typography>\n                      <Typography color={colors.grey[100]}>\n                        {user.uname}\n                      </Typography>\n                    </Box>\n                  </Box>\n                  <Box color={colors.grey[100]}>\n                    {user.createdAt && toDateString(user.createdAt)}\n                  </Box>\n                  <Box\n                    backgroundColor={colors.greenAccent[500]}\n                    p=\"5px 10px\"\n                    borderRadius=\"4px\"\n                    display='flex'\n                    flexDirection='row'\n                    justifyContent='center'\n                    alignItems='center'\n                    style={{ cursor: 'pointer' }}\n                  >\n                    <VisibilityIcon />\n                  </Box>\n                </Box>\n              ))\n            }\n          </Box>\n\n          {/* <Box\n            gridColumn=\"span 8\"\n            gridRow=\"span 2\"\n            sx={{ gridColumn: \"span 12\", gridRow: \"span 2\" }}\n            backgroundColor={colors.primary[400]}\n          >\n            <Box\n              mt=\"25px\"\n              p=\"0 30px\"\n              display=\"flex \"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Box>\n                <Typography\n                  variant=\"h5\"\n                  fontWeight=\"600\"\n                  color={colors.grey[100]}\n                >\n                  Recent Users\n                </Typography>\n                <Typography\n                  variant=\"h3\"\n                  fontWeight=\"bold\"\n                  color={colors.greenAccent[500]}\n                >\n                  $59,342.32\n                </Typography>\n              </Box>\n              <Box>\n                <IconButton>\n                  <DownloadOutlinedIcon\n                    sx={{ fontSize: \"26px\", color: colors.greenAccent[500] }}\n                  />\n                </IconButton>\n              </Box>\n            </Box>\n            <Box height=\"250px\" m=\"-20px 0 0 0\">\n              <LineChart isDashboard={true} />\n            </Box>\n          </Box> */}\n\n          <Box\n            gridColumn={{ xs: \"span 12\", lg: \"span 6\" }}\n            gridRow=\"span 3\"\n            backgroundColor={colors.primary[400]}\n            overflow=\"auto\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              borderBottom={`4px solid ${colors.primary[500]}`}\n              colors={colors.grey[100]}\n              p=\"15px\"\n            >\n              <Typography color={colors.grey[100]} variant=\"h5\" fontWeight=\"600\">\n                Recent Posts\n              </Typography>\n            </Box>\n            {\n              (stats.status === 'success' && stats.recentPosts) &&\n              stats.recentPosts.map((post, i) => (\n                <Box\n                  key={`${post._id}-${i}`}\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"center\"\n                  borderBottom={`4px solid ${colors.primary[500]}`}\n                  p=\"15px\"\n                >\n                  <Box>\n                    <Typography\n                      color={colors.greenAccent[500]}\n                      variant=\"h5\"\n                      fontWeight=\"600\"\n                    >\n                      {post._id}\n                    </Typography>\n                    <Typography color={colors.grey[100]}>\n                      {post.owner.uname}\n                    </Typography>\n                  </Box>\n                  <Box color={colors.grey[100]}>\n                    {post.createdAt && toDateString(post.createdAt)}\n                  </Box>\n                  <Box\n                    backgroundColor={colors.greenAccent[500]}\n                    p=\"5px 10px\"\n                    borderRadius=\"4px\"\n                    display='flex'\n                    flexDirection='row'\n                    justifyContent='center'\n                    alignItems='center'\n                    style={{ cursor: 'pointer' }}\n                  >\n                    <VisibilityIcon />\n                  </Box>\n                </Box>\n              ))\n            }\n          </Box>\n\n          {/* Row 2 End */}\n\n          {/* Row 3 Start */}\n\n          {\n            (stats.status === 'success' && stats.verifiedUsersStats) &&\n            <Box\n              gridColumn={{ xs: \"span 12\", lg: \"span 4\" }}\n              gridRow=\"span 2\"\n              backgroundColor={colors.primary[400]}\n              p=\"20px\"\n            >\n              <Typography variant=\"h5\" fontWeight=\"600\">\n                Verified Users\n              </Typography>\n              <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                mt=\"25px\"\n              >\n                <ProgressCircle\n                  size=\"144\"\n                  progress={stats.verifiedUsersStats.roundedUnit}\n                />\n                <Typography\n                  variant=\"h5\"\n                  color={colors.greenAccent[500]}\n                  sx={{ mt: \"15px\" }}\n                >\n                  {stats.verifiedUsersStats.roundedPercentage}% verified users\n                </Typography>\n                <Typography>\n                  {`${stats.verifiedUsersStats.verifiedUsers} out of\n                  ${stats.verifiedUsersStats.totalUsers} users are verified`}\n                </Typography>\n              </Box>\n            </Box>\n          }\n\n          {\n            (stats.status === 'success' && stats.monthlyStats) ?\n              <Box\n                gridColumn={{ xs: \"span 12\", lg: \"span 4\" }}\n                gridRow=\"span 2\"\n                backgroundColor={colors.primary[400]}\n              >\n                <Typography\n                  variant=\"h5\"\n                  fontWeight=\"600\"\n                  sx={{ padding: \"30px 30px 0 30px\" }}\n                >\n                  Monthly Stats\n                </Typography>\n                <Box height=\"250px\" mt=\"-20px\">\n                  <BarChart data={stats.monthlyStats} />\n                </Box>\n              </Box>\n              :\n              null\n          }\n\n          {/* <Box\n            gridColumn={{ xs: \"span 12\", lg: \"span 4\" }}\n            gridRow=\"span 2\"\n            backgroundColor={colors.primary[400]}\n            padding=\"30px\"\n          >\n            <Typography\n              variant=\"h5\"\n              fontWeight=\"600\"\n              sx={{ marginBottom: \"15px\" }}\n            >\n              Geography Based Traffic\n            </Typography>\n            <Box height=\"200px\">\n              <GeographyChart isDashboard={true} />\n            </Box>\n          </Box> */}\n\n          {/* Row 3 End */}\n\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"names":["title","subtitle","theme","useTheme","colors","tokens","palette","mode","mb","variant","color","grey","fontWeight","sx","m","greenAccent","data","axis","domain","line","stroke","legend","text","fill","ticks","strokeWidth","legends","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","type","indexScale","round","scheme","borderColor","from","modifiers","colorBy","defs","id","background","size","stagger","rotation","lineWidth","spacing","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","axisLeft","enableLabel","label","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","animate","motionStiffness","motionDamping","role","tooltip","e","borderRadius","display","flexDirection","alignItems","justifyContent","fontSize","backgroundColor","width","height","marginLeft","value","barAriaLabel","icon","Box","gridColumn","primary","Typography","mt","progress","angle","blueAccent","toDateString","date","dateObj","Date","year","getFullYear","month","getMonth","day","getDate","toString","avatar","fit","objectFit","url","src","alt","auth","useSelector","state","stats","dispatch","useDispatch","useState","open","setOpen","closeBackdrop","openBackdrop","getData","status","statsPromise","getStatsAction","token","recentUsersPromise","getRecentUsersAction","recentPostsPromise","getRecentPostsAction","verifiedUsersPromise","getVerifiedUsersStatsAction","monthlyStatsPromise","getMonthlyStatsAction","Promise","all","renderIcon","key","PersonAdd","List","Comment","Email","useEffect","document","user","Backdrop","zIndex","drawer","CircularProgress","Header","Button","DownloadOutlined","mr","gridTemplateColumns","gridAutoRows","gap","pb","Object","map","stat","total","toLocaleUpperCase","xs","lg","gridRow","overflow","borderBottom","p","recentUsers","i","ml","_id","uname","createdAt","cursor","Visibility","recentPosts","post","owner","verifiedUsersStats","roundedUnit","roundedPercentage","verifiedUsers","totalUsers","monthlyStats"],"sourceRoot":""}