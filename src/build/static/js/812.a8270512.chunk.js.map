{"version":3,"file":"static/js/812.a8270512.chunk.js","mappings":"2XAuPA,WAAeA,EAAAA,EAAAA,IAlOkB,WAC/B,IAAMC,GAAQC,EAAAA,EAAAA,KACRC,GAASC,EAAAA,EAAAA,IAAOH,EAAMI,QAAQC,MAE9BC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,IAAI,IACxCG,GAAiBF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,cAAc,IAC5DC,GAAmBH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAME,gBAAgB,IAChEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAETC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAER,GAAwBE,EAAAA,EAAAA,UAAS,GAAE,eAA5BC,EAAI,KAAEC,EAAO,KACpB,GAAwBF,EAAAA,EAAAA,WAAS,GAAM,eAAhCG,EAAI,KAAEC,EAAO,KAEdC,EAAgB,WACpBD,GAAQ,EACV,EAEME,EAAe,WACnBF,GAAQ,EACV,EAEMG,EAAO,yCAAG,yFAEC,OADTC,GAA0BC,EAAAA,EAAAA,IAA6Bf,EAAUL,EAAKqB,OAC5EJ,IAAe,SACTE,EAAwB,KAAD,EAC7BH,IAAgB,2CACjB,kBALY,mCAOPM,EAAgB,yCAAG,WAAOC,GAAO,8EAG2D,GAFhGV,EAAQU,GACFC,EAAcD,GAAW,EAAI,EAAIA,EAAU,EAC3CJ,GAA0BC,EAAAA,EAAAA,IAA6Bf,EAAUL,EAAKqB,MAAOG,GACnD,YAA5BpB,EAAiBqB,SAAwBrB,EAAiBsB,YAAW,gCACjEP,EAAwB,KAAD,sCAEhC,gBAPqB,sCAShBQ,EAAU,CACd,CACEC,MAAO,MACPC,WAAY,KACZC,KAAM,GAER,CACEF,MAAO,QACPC,WAAY,QACZC,KAAM,GAER,CACEF,MAAO,OACPC,WAAY,UACZC,KAAM,GAER,CACEF,MAAO,WACPC,WAAY,WACZC,KAAM,KAER,CACEF,MAAO,SACPC,WAAY,SACZC,KAAM,IACNC,WAAY,YAA0B,IAAhBN,EAAM,EAAbO,IAAOP,OACpB,OACE,gBACEQ,MAAO,CACLC,gBAA4B,aAAXT,EACf7B,EAAOuC,YAAY,KACnBvC,EAAOwC,UAAU,KACnBC,QAAS,UACTC,aAAc,MACdC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,UACZ,UAEF,SAAC,IAAU,CACTT,MAAO,CACLU,MAAO/C,EAAOgD,MACdC,WAAY,OACZC,SAAU,QACV,SAEDrB,KAIT,GAEF,CACEG,MAAO,YACPC,WAAY,aACZC,KAAM,EACNC,WAAY,YAA6B,IAAnBgB,EAAS,EAAhBf,IAAOe,UACpB,OACE,SAAC,IAAU,UACRA,GAAYC,EAAAA,EAAAA,IAAaD,GAAa,IAG7C,GAEF,CACEnB,MAAO,OACPC,WAAY,GACZC,KAAM,EACNC,WAAY,YAAuB,IAAbkB,EAAG,EAAVjB,IAAOiB,IACpB,OACE,gBACEhB,MAAO,CACLC,gBAAiBtC,EAAOuC,YAAY,KACpCE,QAAS,WACTC,aAAc,MACdC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,SACZQ,OAAQ,WAEVC,QAAS,kBAAM5C,EAAS,uBAAD,OAAwB0C,GAAM,EAAC,UAEtD,SAAC,IAAc,KAGrB,IAsCJ,OAlCAG,EAAAA,EAAAA,YAAU,WAkBR,OAjBAC,SAASC,MAAQ,iCAGC,mBAAhBtD,EAAKyB,QAAyD,YAA1BtB,EAAesB,QACvB,YAA5BrB,EAAiBqB,OAEjBR,IAGAD,IAG8B,UAA5BZ,EAAiBqB,SACnBhB,EAAgBL,EAAiBmD,MAAO,CAAEC,QAAS,WACnDC,EAAAA,EAAAA,IAAiCpD,IAG5B,WAAQ,CAEjB,GAAG,CACDL,EAAKqB,MAAOlB,EAAesB,OAAQzB,EAAKyB,OAAQrB,EAAiBqB,OACjErB,EAAiBmD,MAAO9C,EAAiBJ,KAG3C+C,EAAAA,EAAAA,YAAU,WAKR,MAJgC,SAA5BhD,EAAiBqB,QACnBP,IAGK,WAAQ,CAEjB,GAAG,CAAClB,EAAKqB,MAAOjB,EAAiBqB,UAG/B,UAAC,IAAG,CAACiC,EAAE,OAAOC,GAAG,IAAIC,MAAM,OAAM,WAC/B,SAAC,IAAQ,CACPC,GAAI,CAAElB,MAAO,OAAQmB,OAAQ,SAACpE,GAAK,OAAKA,EAAMoE,OAAOC,OAAS,CAAC,GAC/DjD,KAAMA,EAAK,UAEX,SAAC,IAAgB,CAAC6B,MAAM,eAG1B,SAAC,IAAM,CAACW,MAAM,qBAAqBU,SAAS,sDAC5C,SAAC,IAAG,CACFN,EAAE,aACFO,OAAO,OACPJ,GAAI,CACF,sBAAuB,CACrBK,OAAQ,QAEV,sBAAuB,CACrBC,aAAc,QAEhB,uBAAwB,CACtBxB,MAAO/C,EAAOuC,YAAY,MAE5B,+BAAgC,CAC9BD,gBAAiBtC,EAAOwE,WAAW,KACnCD,aAAc,QAEhB,iCAAkC,CAChCjC,gBAAiBtC,EAAOyE,QAAQ,MAElC,iCAAkC,CAChCC,UAAW,OACXpC,gBAAiBtC,EAAOwE,WAAW,MAErC,sBAAuB,CACrBzB,MAAM,GAAD,OAAK/C,EAAOuC,YAAY,KAAI,iBAEnC,SAG4B,YAA5B/B,EAAiBqB,SACf,SAAC,IAAQ,CACP8C,KAAMnE,EAAiBoE,QACvB7C,QAASA,EACT8C,SAAUrE,EAAiBsE,WAAatE,EAAiBuE,MACzDC,YAAU,EACVC,eAAe,SACfC,SAAU1E,EAAiBuE,MAC3BI,mBAAoB,CAAC3E,EAAiBuE,OACtC/D,KAAMA,EACNoE,aAAc1D,EACd2D,yBAAuB,EACvBC,SAAU,SAAClD,GAAG,OAAKA,EAAIiB,GAAG,EAC1BkC,QAAqC,YAA5B/E,EAAiBqB,aAOxC,G","sources":["pages/blue-tick-requests/Index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box, Typography, useTheme } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { tokens } from \"../../theme\";\nimport { useNavigate } from \"react-router-dom\";\nimport VerifiedUserIcon from '@mui/icons-material/VerifiedUser';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useSnackbar } from 'notistack';\nimport Header from \"../../components/Header\";\nimport {\n  getAllBlueTickRequestsAction,\n  clearBlueTickRequestsErrorAction\n} from '../../redux/actions';\nimport PageHOC from \"../../helpers/PageHOC\";\nimport CircleAvatar from \"../../components/global/CircleAvatar\";\nimport { toDateString } from '../../utils/dateUtils';\n\nconst BlueTickRequestsListPage = () => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  const auth = useSelector((state) => state.auth);\n  const profileDetails = useSelector((state) => state.profileDetails);\n  const blueTickRequests = useSelector((state) => state.blueTickRequests);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [page, setPage] = useState(0);\n  const [open, setOpen] = useState(false);\n\n  const closeBackdrop = () => {\n    setOpen(false);\n  };\n\n  const openBackdrop = () => {\n    setOpen(true);\n  };\n\n  const getData = async () => {\n    const blueTickRequestsPromise = getAllBlueTickRequestsAction(dispatch, auth.token);\n    openBackdrop();\n    await blueTickRequestsPromise;\n    closeBackdrop();\n  }\n\n  const handlePageChange = async (newPage) => {\n    setPage(newPage);\n    const currentPage = newPage <= 0 ? 1 : newPage + 1;\n    const blueTickRequestsPromise = getAllBlueTickRequestsAction(dispatch, auth.token, currentPage);\n    if (blueTickRequests.status !== 'loading' && blueTickRequests.hasNextPage) {\n      await blueTickRequestsPromise;\n    }\n  };\n\n  const columns = [\n    {\n      field: \"_id\",\n      headerName: \"ID\",\n      flex: 1,\n    },\n    {\n      field: \"email\",\n      headerName: \"Email\",\n      flex: 1,\n    },\n    {\n      field: \"user\",\n      headerName: \"User ID\",\n      flex: 1,\n    },\n    {\n      field: \"category\",\n      headerName: \"Category\",\n      flex: 1.5,\n    },\n    {\n      field: \"status\",\n      headerName: \"Status\",\n      flex: 1.5,\n      renderCell: ({ row: { status } }) => {\n        return (\n          <div\n            style={{\n              backgroundColor: status === 'approved' ?\n                colors.greenAccent[500] :\n                colors.redAccent[500],\n              padding: '4px 8px',\n              borderRadius: '4px',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Typography\n              style={{\n                color: colors.white,\n                fontWeight: 'bold',\n                fontSize: '12px',\n              }}\n            >\n              {status}\n            </Typography>\n          </div>\n        );\n      }\n    },\n    {\n      field: \"createdAt\",\n      headerName: \"Created At\",\n      flex: 1,\n      renderCell: ({ row: { createdAt } }) => {\n        return (\n          <Typography>\n            {createdAt ? toDateString(createdAt) : \"\"}\n          </Typography>\n        );\n      },\n    },\n    {\n      field: \"edit\",\n      headerName: \"\",\n      flex: 1,\n      renderCell: ({ row: { _id } }) => {\n        return (\n          <div\n            style={{\n              backgroundColor: colors.greenAccent[500],\n              padding: '5px 10px',\n              borderRadius: '4px',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n              alignItems: 'center',\n              cursor: 'pointer'\n            }}\n            onClick={() => navigate(`/blue-tick-requests/${_id}`)}\n          >\n            <VisibilityIcon />\n          </div>\n        );\n      }\n    }\n  ];\n\n  useEffect(() => {\n    document.title = \"Dashboard - Blue Tick Requests\";\n\n    if (\n      auth.status === 'authenticating' || profileDetails.status === 'loading' ||\n      blueTickRequests.status === 'loading'\n    ) {\n      openBackdrop();\n    }\n    else {\n      closeBackdrop();\n    }\n\n    if (blueTickRequests.status === 'error') {\n      enqueueSnackbar(blueTickRequests.error, { variant: 'error' });\n      clearBlueTickRequestsErrorAction(dispatch);\n    }\n\n    return () => { }\n\n  }, [\n    auth.token, profileDetails.status, auth.status, blueTickRequests.status,\n    blueTickRequests.error, enqueueSnackbar, dispatch\n  ]);\n\n  useEffect(() => {\n    if (blueTickRequests.status === 'idle') {\n      getData();\n    }\n\n    return () => { }\n\n  }, [auth.token, blueTickRequests.status]);\n\n  return (\n    <Box m=\"20px\" mt=\"0\" width=\"100%\">\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={open}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n\n      <Header title=\"BLUE TICK REQUESTS\" subtitle=\"Managing the requests for blue tick verification\" />\n      <Box\n        m=\"40px 0 0 0\"\n        height=\"75vh\"\n        sx={{\n          \"& .MuiDataGrid-root\": {\n            border: \"none\",\n          },\n          \"& .MuiDataGrid-cell\": {\n            borderBottom: \"none\",\n          },\n          \"& .name-column--cell\": {\n            color: colors.greenAccent[300],\n          },\n          \"& .MuiDataGrid-columnHeaders\": {\n            backgroundColor: colors.blueAccent[700],\n            borderBottom: \"none\",\n          },\n          \"& .MuiDataGrid-virtualScroller\": {\n            backgroundColor: colors.primary[400],\n          },\n          \"& .MuiDataGrid-footerContainer\": {\n            borderTop: \"none\",\n            backgroundColor: colors.blueAccent[700],\n          },\n          \"& .MuiCheckbox-root\": {\n            color: `${colors.greenAccent[200]} !important`,\n          },\n        }}\n      >\n        {\n          blueTickRequests.status === 'success' && (\n            <DataGrid\n              rows={blueTickRequests.results}\n              columns={columns}\n              rowCount={blueTickRequests.totalPages * blueTickRequests.limit}\n              pagination\n              paginationMode=\"server\"\n              pageSize={blueTickRequests.limit}\n              rowsPerPageOptions={[blueTickRequests.limit]}\n              page={page}\n              onPageChange={handlePageChange}\n              disableSelectionOnClick\n              getRowId={(row) => row._id}\n              loading={blueTickRequests.status === 'loading'}\n            />\n          )\n        }\n      </Box>\n    </Box>\n  );\n};\n\nexport default PageHOC(BlueTickRequestsListPage);\n"],"names":["PageHOC","theme","useTheme","colors","tokens","palette","mode","auth","useSelector","state","profileDetails","blueTickRequests","dispatch","useDispatch","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","page","setPage","open","setOpen","closeBackdrop","openBackdrop","getData","blueTickRequestsPromise","getAllBlueTickRequestsAction","token","handlePageChange","newPage","currentPage","status","hasNextPage","columns","field","headerName","flex","renderCell","row","style","backgroundColor","greenAccent","redAccent","padding","borderRadius","display","flexDirection","justifyContent","alignItems","color","white","fontWeight","fontSize","createdAt","toDateString","_id","cursor","onClick","useEffect","document","title","error","variant","clearBlueTickRequestsErrorAction","m","mt","width","sx","zIndex","drawer","subtitle","height","border","borderBottom","blueAccent","primary","borderTop","rows","results","rowCount","totalPages","limit","pagination","paginationMode","pageSize","rowsPerPageOptions","onPageChange","disableSelectionOnClick","getRowId","loading"],"sourceRoot":""}