{"version":3,"file":"static/js/820.da9001db.chunk.js","mappings":"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","sources":["pages/posts/Index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Box, Typography, useTheme } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { tokens } from \"../../theme\";\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport {\r\n    getAllPostsAction,\r\n} from '../../redux/actions';\r\nimport PageHOC from \"../../helpers/PageHOC\";\r\nimport { toDateString } from '../../utils/dateUtils';\r\n\r\nconst PostListPage = () => {\r\n    const theme = useTheme();\r\n    const colors = tokens(theme.palette.mode);\r\n\r\n    const auth = useSelector((state) => state.auth);\r\n    const profileDetails = useSelector((state) => state.profileDetails);\r\n    const posts = useSelector((state) => state.posts);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const closeBackdrop = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const openBackdrop = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const getData = async () => {\r\n        const postsPromise = getAllPostsAction(dispatch, auth.token);\r\n        openBackdrop();\r\n        await postsPromise;\r\n        closeBackdrop();\r\n    }\r\n\r\n    const handlePageChange = async (newPage) => {\r\n        setPage(newPage);\r\n        const currentPage = newPage <= 0 ? 1 : newPage + 1;\r\n        const postsPromise = getAllPostsAction(dispatch, auth.token, currentPage);\r\n        if (posts.status !== 'loading' && posts.hasNextPage) {\r\n            await postsPromise;\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            field: \"_id\",\r\n            headerName: \"ID\",\r\n            flex: 1.5,\r\n        },\r\n        {\r\n            field: \"owner\",\r\n            headerName: \"User\",\r\n            flex: 1.5,\r\n        },\r\n        {\r\n            field: \"postType\",\r\n            headerName: \"Post Type\",\r\n            flex: 1,\r\n            renderCell: ({ row: { postType } }) => {\r\n                return (\r\n                    <Typography>\r\n                        {postType}\r\n                    </Typography>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            field: \"mediaCount\",\r\n            headerName: \"Media Files\",\r\n            flex: 1,\r\n            renderCell: ({ row: { mediaFiles } }) => {\r\n                return (\r\n                    <Typography>\r\n                        {mediaFiles.length}\r\n                    </Typography>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            field: \"visibility\",\r\n            headerName: \"Visibility\",\r\n            flex: 1,\r\n            renderCell: ({ row: { visibility } }) => {\r\n                return (\r\n                    <Typography>\r\n                        {visibility}\r\n                    </Typography>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            field: \"postStatus\",\r\n            headerName: \"Status\",\r\n            flex: 1,\r\n            renderCell: ({ row: { postStatus } }) => {\r\n                return (\r\n                    <Box\r\n                        m=\"0\"\r\n                        p=\"2px 6px\"\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        backgroundColor={\r\n                            postStatus === \"active\"\r\n                                ? colors.greenAccent[600]\r\n                                : colors.redAccent[600]\r\n                        }\r\n                        borderRadius=\"4px\"\r\n                    >\r\n                        <Typography fontSize=\"12px\"\r\n                        >\r\n                            {postStatus}\r\n                        </Typography>\r\n                    </Box>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            field: \"createdAt\",\r\n            headerName: \"Created At\",\r\n            flex: 1,\r\n            renderCell: ({ row: { createdAt } }) => {\r\n                return (\r\n                    <Typography>\r\n                        {createdAt ? toDateString(createdAt) : \"\"}\r\n                    </Typography>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            field: \"edit\",\r\n            headerName: \"\",\r\n            flex: 1,\r\n            renderCell: ({ row: { _id } }) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: colors.greenAccent[500],\r\n                            padding: '5px 10px',\r\n                            borderRadius: '4px',\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        onClick={() => navigate(`/posts/${_id}`)}\r\n                    >\r\n                        <VisibilityIcon />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        document.title = \"All Posts | Dashboard\";\r\n\r\n        if (\r\n            auth.status === 'authenticating' || profileDetails.status === 'loading' ||\r\n            posts.status === 'loading'\r\n        ) {\r\n            openBackdrop();\r\n        }\r\n        else {\r\n            closeBackdrop();\r\n        }\r\n\r\n        return () => { }\r\n\r\n    }, [\r\n        auth.token, profileDetails.status, auth.status, posts.status\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (posts.status === 'idle') {\r\n            getData();\r\n        }\r\n\r\n        return () => { }\r\n\r\n    }, [auth.token, posts.status]);\r\n\r\n    return (\r\n        <Box m=\"20px\" mt=\"0\" width=\"100%\">\r\n            <Backdrop\r\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n                open={open}\r\n            >\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n            <Header title=\"POSTS\" subtitle=\"Managing the Posts\" />\r\n            <Box\r\n                m=\"40px 0 0 0\"\r\n                height=\"75vh\"\r\n                sx={{\r\n                    \"& .MuiDataGrid-root\": {\r\n                        border: \"none\",\r\n                    },\r\n                    \"& .MuiDataGrid-cell\": {\r\n                        borderBottom: \"none\",\r\n                    },\r\n                    \"& .name-column--cell\": {\r\n                        color: colors.greenAccent[300],\r\n                    },\r\n                    \"& .MuiDataGrid-columnHeaders\": {\r\n                        backgroundColor: colors.blueAccent[700],\r\n                        borderBottom: \"none\",\r\n                    },\r\n                    \"& .MuiDataGrid-virtualScroller\": {\r\n                        backgroundColor: colors.primary[400],\r\n                    },\r\n                    \"& .MuiDataGrid-footerContainer\": {\r\n                        borderTop: \"none\",\r\n                        backgroundColor: colors.blueAccent[700],\r\n                    },\r\n                    \"& .MuiCheckbox-root\": {\r\n                        color: `${colors.greenAccent[200]} !important`,\r\n                    },\r\n                }}\r\n            >\r\n                {\r\n                    posts.status === 'success' && (\r\n                        <DataGrid\r\n                            rows={posts.results}\r\n                            columns={columns}\r\n                            rowCount={posts.totalPages * posts.limit}\r\n                            pagination\r\n                            paginationMode=\"server\"\r\n                            pageSize={posts.limit}\r\n                            rowsPerPageOptions={[posts.limit]}\r\n                            page={page}\r\n                            onPageChange={handlePageChange}\r\n                            disableSelectionOnClick\r\n                            getRowId={(row) => row._id}\r\n                            loading={posts.status === 'loading'}\r\n                        />\r\n                    )\r\n                }\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default PageHOC(PostListPage);"],"names":["PageHOC","theme","useTheme","colors","tokens","palette","mode","auth","useSelector","state","profileDetails","posts","dispatch","useDispatch","navigate","useNavigate","useState","page","setPage","open","setOpen","closeBackdrop","openBackdrop","getData","postsPromise","getAllPostsAction","token","handlePageChange","newPage","currentPage","status","hasNextPage","columns","field","headerName","flex","renderCell","postType","row","mediaFiles","length","visibility","postStatus","m","p","display","justifyContent","alignItems","backgroundColor","greenAccent","redAccent","borderRadius","fontSize","createdAt","toDateString","_id","style","padding","flexDirection","cursor","onClick","useEffect","document","title","mt","width","sx","color","zIndex","drawer","subtitle","height","border","borderBottom","blueAccent","primary","borderTop","rows","results","rowCount","totalPages","limit","pagination","paginationMode","pageSize","rowsPerPageOptions","onPageChange","disableSelectionOnClick","getRowId","loading"],"sourceRoot":""}